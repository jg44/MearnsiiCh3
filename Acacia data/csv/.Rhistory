Alldates <- Alldates[Alldates$Sites != "Sokhulu Forestry Station, KZN", ]
Alldates <- subset(Alldates, select=-Date)
Alldates <- aggregate(. ~ Sites, Alldates, sum)
rownames(Alldates) <- Alldates[,1]
Alldates[,1] <- NULL
#write.table(table(unlist(lapply(strsplit(names(SCdates), "\\."), "[[", 1))), "families.csv")
# remove unwanted sites
SCdates <- SCdates[SCdates$Sites %in% rownames(sites), ]
# remove 2007 data
SCdates <- subset(SCdates, !grepl("2007", SCdates$Date), drop=T)
# extract year from date
substringRight <- function(x,n)substr(x, nchar(x)-n+1, nchar(x))
SCdates$Date <- sapply(SCdates$Date, function(x)substringRight(toString(x), 4))
# rename 'Date' column to 'Year'
names(SCdates)[names(SCdates) == 'Date'] <- 'Year'
# group by Year and Site
ByYearSiteSp <- aggregate(. ~ Year + Sites, SCdates, sum)
# get 2008 rows
BySite2008Sp <- subset(ByYearSiteSp, Year=="2008")
BySite2008Sp <- subset(BySite2008Sp, select=-Year)
rownames(BySite2008Sp) <- BySite2008Sp[,1]
BySite2008Sp[,1] <- NULL
# get 2009 rows
BySite2009Sp <- subset(ByYearSiteSp, Year=="2009")
BySite2009Sp <- subset(BySite2009Sp, select=-Year)
rownames(BySite2009Sp) <- BySite2009Sp[,1]
BySite2009Sp[,1] <- NULL
ByYearSiteColors <- merge(x=ByYearSiteSp, y=sites, by.x="Sites", by.y=0)$color
ByYearSiteSp$Sites <- paste(ByYearSiteSp$Sites, ByYearSiteSp$Year)
ByYearSiteSp <- subset(ByYearSiteSp, select=-Year)
rownames(ByYearSiteSp) <- ByYearSiteSp[,1]
ByYearSiteSp[,1] <- NULL
# group by Site
BySiteSp <- subset(SCdates, select=-Year)
BySiteSp <- aggregate(. ~ Sites, BySiteSp, sum)
BySiteColors <- merge(x=BySiteSp, y=sites, by.x="Sites", by.y=0)$color
BySiteAlternateColors <- merge(x=BySiteSp, y=sites, by.x="Sites", by.y=0)$alternatecolor
rownames(BySiteSp) <- BySiteSp[,1]
BySiteSp[,1] <- NULL
groupByFamily <- function(SC) {
names(SC)<-unlist(lapply(strsplit(names(SC), "\\."), "[[", 1))
pv<-unique(names(SC))
families<-data.frame(SC)
for (i in 1:length(pv)){
#i=1
tmp<-rowSums(data.frame(fam=SC[,which(names(SC)==pv[i])]))
families<-cbind(families, data.frame(add=tmp))
}
families<-families[,-(1:length(names(SC)))]
names(families)<-pv
families
}
ByYearSiteFamily <- groupByFamily(ByYearSiteSp)
BySiteFamily <- groupByFamily(BySiteSp)
BySite2008Family <- groupByFamily(BySite2008Sp)
BySite2009Family <- groupByFamily(BySite2009Sp)
#MultiColors <- c("#fdbf6f","#e7298a","#1f78b4","#000000","#cab2d6","#ff7f00","#b15928","#33a02c","#6a3d9a","#fb9a99","#e31a1c","#a6cee3","#cccc7a","#b2df8a","#016c59")
MultiColors <- c("#fdbf6f","#e7298a","#1f78b4","#000000","#cab2d6","#ff7f00","#b15928","#33a02c","#6a3d9a","#e31a1c","#a6cee3","#cccc7a","#b2df8a","#016c59")
exportpdf <- function(number, file, ...) {
filename <- paste(number, " - ", prefix, file, sep="")
pdf(file=paste(outputFolder,filename,sep=""),width=6.66,height=4.15)
plotR(...)
dev.off()
}
#exportpdf(1, "2007-2009 sp.pdf",main="Beetle Assemblages Rarefaction Curve", ylab="Expected Richness (Sps)", Alldates, MultiColors, showLegend=T, legendOutside=T)
exportpdf(1, "2007-2009 sp.pdf",main="Beetle Assemblages Rarefaction Curve", ylab="Expected Richness (Sps)", Alldates, MultiColors)
#plotRichness(BySiteSp, merge(x=BySite, y=sites, by.x=0, by.y=0)$latitude, BySiteAlternateColors)
exportpdf(2, "2008-2009 sp.pdf", main="Beetle Assemblages Rarefaction Curve", ylab="Expected Richness (Sps)", BySiteSp, BySiteAlternateColors, labels=rownames(sites), labelColors=sites$alternatecolor)
exportpdf(3, "2008-2009 fam.pdf", main="Beetle Assemblages Rarefaction Curve", ylab="Expected Richness (Fam)", BySiteFamily, BySiteAlternateColors, labels=rownames(sites), labelColors=sites$alternatecolor)
exportpdf(4, "2008-2009 sp latitude.pdf", main="Beetle Assemblages Rarefaction Curve", ylab="Expected Richness (Sps)", BySiteSp, BySiteColors, labels=rownames(sites), labelColors=sites$color)
exportpdf(5, "2008-2009 fam latitude.pdf", main="Beetle Assemblages Rarefaction Curve", ylab="Expected Richness (Fam)", BySiteFamily, BySiteColors, labels=rownames(sites), labelColors=sites$color)
exportpdf(6, "2008 sp.pdf", ylab="Expected Richness (Sps)", BySite2008Sp, BySiteColors, labels=rownames(sites), labelColors=sites$color)
exportpdf(7, "2009 sp.pdf", ylab="Expected Richness (Sps)", BySite2009Sp, BySiteColors, labels=rownames(sites), labelColors=sites$color)
exportpdf(8, "2008 fam.pdf", ylab="Expected Richness (Fam)", BySite2008Family, BySiteColors, labels=rownames(sites), labelColors=sites$color)
exportpdf(9, "2009 fam.pdf", ylab="Expected Richness (Fam)", BySite2009Family, BySiteColors, labels=rownames(sites), labelColors=sites$color)
exportpdf(10, "2008-2009 sp.pdf", ylab="Expected Richness (Sps)", ByYearSiteSp, ByYearSiteColors, labels=rownames(sites), labelColors=sites$color, ltys=rep(2:1, 8))
#View(data.frame(plotRichness(ByYearSiteSp, rep(sites[order(rownames(sites)),]$latitude,each=2), ByYearSiteColors), rep(sites[order(rownames(sites)),]$latitude,each=2)))
exportpdf(11, "2008-2009 fam.pdf", ylab="Expected Richness (Fam)", ByYearSiteFamily, ByYearSiteColors, labels=rownames(sites), labelColors=sites$color, ltys=rep(2:1, 8))
read.csv("SC dates.csv")
view(read.csv("SC dates.csv"))
View(read.csv("SC dates.csv"))
View(read.csv("/Users/solivier/Desktop/SC Data/SC dates.csv"))
View(data)
data -> read.csv("/Users/solivier/Desktop/SC Data/SC dates.csv")
View(scdata)
scdata -> read.csv("/Users/solivier/Desktop/SC Data/SC dates.csv")
scdata <- read.csv("/Users/solivier/Desktop/SC Data/SC dates.csv")
View(scdata)
library(dismo)
install.packages("/Volumes/NO NAME/R/caret_6.0-41.tar.gz", repos = NULL, type = "source")
install.packages("/Volumes/NO NAME/R/dismo_1.0-12.tar.gz", repos = NULL, type = "source")
install.packages("/Volumes/NO NAME/R/raster_2.3-33.tar.gz", repos = NULL, type = "source")
install.packages("/Volumes/NO NAME/R/sp_1.0-17.tar.gz", repos = NULL, type = "source")
install.packages("/Volumes/NO NAME/R/sp_1.0-17.tar.gz", repos = NULL, type = "source")
install.packages("sp")
library(sp)
install.packages("raster")
library(raster)
install.packages("dismo")
library(dismo)
install.packages("gbm")
install.packages("caret")
install.packages("hydroGOF")
install.packages("randomForest")
library(dismo)
data(Anguilla_train)
head(Anguilla_train)
Library(dismo)
install.packages("dismo")
library("dismo", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(dismo)
data(Anguilla_train)
head(Anguilla_train)
angaus.tc5.lr01 <- gbm.step(data=Anguilla_train, gbm.x = 3:13, gbm.y = 2, family = "bernoulli", tree.complexity = 5, learning.rate = 0.01, bag.fraction = 0.5)
model.data$Angaus
args(gmb.step)
args(gbm.step)
gbm.step
(angaus.tc5.lr01$cv.statistics)
(angaus.tc5.lr01[[29]])
length(angaus.tc5.lr01$fitted)
names(angaus.tc5.lr01)
summary(angaus.tc5.lr01)
angaus.tc5.lr005 <- gbm.step(data=Anguilla_train, gbm.x = 3:13, gbm.y = 2, family = "bernoulli", tree.complexity = 5, learning.rate = 0.005, bag.fraction = 0.5)
angaus.simp <- gbm.simplify(angaus.tc5.lr005, n.drops = 5)
angaus.tc5.lr005.simp <- gbm.step(Anguilla_train, gbm.x=angaus.simp$pred.list[[1]], gmb.y=2, tree.complexity=5, learning.rate=0.005)
angaus.tc5.lr005.simp <- gbm.step(data=Anguilla_train, gbm.x = angaus.simp$pred.list[[1]], gbm.y = 2, tree.complexity = 5, learning.rate = 0.005)
angaus.tc5.lr005.simp <- gbm.step(Anguilla_train, gbm.x = angaus.simp$pred.list[[1]], gbm.y = 2, tree.complexity = 5, learning.rate = 0.005)
angaus.tc5.lr005.simp <- gbm.step(Anguilla_train,
gbm.x=angaus.simp$pred.list[[1]] , gbm.y=2,
tree.complexity=5, learning.rate=0.005)
angaus.simp <- gbm.simplify(angaus.tc5.lr005, n.drops = 5)
angaus.tc5.lr005.simp <- gbm.step(Anguilla_train,
+ gbm.x=angaus.simp$pred.list[[1]] , gbm.y=2,
+ tree.complexity=5, learning.rate=0.005)
angaus.tc5.lr005.simp <- gbm.step(Anguilla_train,)
angaus.tc5.lr005.simp <- gbm.step(Anguilla_train,
gbm.x=angaus.simp$pred.list[[1]] , gbm.y=2,
tree.complexity=5, learning.rate=0.005
)
gmb.plot(angaus.tc5.lr005, n.plots=11, write.title = FALSE)
gbm.plot(angaus.tc5.lr005, n.plots=11, write.title = FALSE)
gbm.plot.fits(angaus.tc5.lr005)
gbm.plot(angaus.tc5.lr005, n.plots=11, write.title = FALSE
)
gbm.plot.fits(angaus.tc5.lr005)
find.int <- gbm.interactions(ngaus.tc5.lr005)
find.int <- gbm.interactions(angaus.tc5.lr005)
find.int$interactions
gbm.perspec(angaus.tc5.lr005, 7, 1, y.range=c(15,20), z.range=c(0,0.6))
data(Anguilla_test)
View(Anguilla_test)
preds <- predict.gbm(angaus.tc5.lr005, Anguilla_test,
ntrees=angaus.tc5.lr005$gbm.call$best.trees, type="response")
library("gbm", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
preds <- predict.gbm(angaus.tc5.lr005, Anguilla_test,
+ ntrees=angaus.tc5.lr005$gbm.call$best.trees, type="response")
preds <- predict.gbm(angaus.tc5.lr005, Anguilla_test
n.trees=angaus.tc5.lr005$gbm.call$best.trees, type="response")
preds <- predict.gbm(angaus.tc5.lr005, Anguilla_test,
n.trees=angaus.tc5.lr005$gbm.call$best.trees, type="response")
calc.deviance(obs=Anguilla_test$Angaus_obs, pred=preds, calc.mean=TRUE)
d <- cbind(Anguilla_test$Angaus_obs, preds)
pres <- d[d[,1]==1, 2]
abs <- d[d[,1]==0, 2]
e <- evaluate(p=pres, a=abs)
e
angaus.5000 <- gbm.fixed(data=Anguilla_train, gbm.x=3:13), gbm.y=2,
angaus.5000 <- gbm.fixed(data=Anguilla_train, gbm.x=3:13, gbm.y=2,
learning.rate=0.005, tree.complexity=5, n.trees=5000)
tree.list <- seq(100, 5000, by=100)
pred <- predict.gbm(angaus.5000, Anguilla_test, n.trees=tree.list, "response")
View(pred)
angaus.pred.deviance <- rep(0,50)
for (i in 1:50) {}
for (i in 1:50) {
angaus.pred.deviance[1] <- calc.deviance(Anguilla_test$Angaus_obs,
pred[,i], calc.mean=TRUE)}
plot(tree.list, angaus.pred.deviance, ylim=c(0.7,1), xlim=c(-100,5000),
type='l', xlab="number of trees", ylab="predictive deviance",
cex.lab=1.5)
angaus.tc5.lr005.simp <- gbm.step(data=Anguilla_train, gbm.x = angaus.simp$pred.list[[1]], gbm.y = 2, tree.complexity = 5, learning.rate = 0.005)
tree.list <- seq(100, 5000, by=100)
> pred <- predict.gbm(angaus.5000, Anguilla_test, n.trees=tree.list, "response")
> View(pred)
> angaus.pred.deviance <- rep(0,50)
> for (i in 1:50) {
+ angaus.pred.deviance[i] <- calc.deviance(Anguilla_test$Angaus_obs,
+ pred[,i], calc.mean=TRUE)}
> plot(tree.list, angaus.pred.deviance, ylim=c(0.7,1), xlim=c(-100,5000),
+ type='l', xlab="number of trees", ylab="predictive deviance",
+ cex.lab=1.5)
tree.list <- seq(100, 5000, by=100)
pred <- predict.gbm(angaus.5000, Anguilla_test, n.trees=tree.list, "response")
angaus.pred.deviance <- rep(0,50)
for (i in 1:50) {
angaus.pred.deviance[i] <- calc.deviance(Anguilla_test$Angaus_obs,
pred[,i], calc.mean=TRUE)}
plot(tree.list, angaus.pred.deviance, ylim=c(0.7,1), xlim=c(-100,5000),
type='l', xlab="number of trees", ylab="predictive deviance",
cex.lab=1.5)
data(Anguilla_grids)
plot(Anguilla_grids)
Method <- factor('electric', levels = levels(Anguilla_train$Method))
add <- data.frame(Method)
View(add)
p <- predict(Anguilla_grids, angaus.tc5.lr005, const=add,
n.trees=angaus.tc5.lr005$gbm.call$best.trees, type="response")
p <- mask(p, raster(Anguilla_grids, 1))
plot(p, main='Angaus - BRT prediction')
install.packages("BiodiversityR")
area <- array(c(10,10,15,35,40,35,5,35,35,30,30,10),
dim=c(6,2))
landuse1 <- array(c(10,10,15,15,30,35,35,30), dim=c(4,2))
landuse2 <- array(c(10,10,15,15,35,30,10,30,30,35,30,15),
dim=c(6,2))
landuse3 <- array(c(10,10,30,35,40,35,5,10,15,30,30,10),
dim=c(6,2))
window <- array(c(15,15,30,30,10,25,25,10),dim=c(4,2))
plot(area[,1], area[,2], type=”n”, xlab=”horizontal position”,
window <- array(c(15,15,30,30,10,25,25,10),dim=c(4,2))
plot(area[,1], area[,2], type=”n”, xlab=”horizontal position”,
library(Rcmdr)
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Accum.1 <- accumresult(dune,
method=’exact’)
Accum.1 <- accumresult(dune, method=’exact’)
Accum.1 <- accumresult(dune,
method=’exact’)
Accum.1 <- accumresult(dune,
method='exact')
library("vegan", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Accum.1 <- accumresult(dune,
method='exact')
?accumresult
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("tcltk2")
?tcltk2
??tcltk2
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("vegan", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Accum.1 <- accumresult(dune,
method='exact')
data(dune)
View(dune)
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:tcltk2", unload=TRUE)
detach("package:tcltk", unload=TRUE)
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:tcltk", unload=TRUE)
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:tcltk", unload=TRUE)
library("tcltk2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tcltk", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:tcltk2", unload=TRUE)
version
capabilities("tcltk")
library(tcltk)
.libPaths
.libPaths()
rarec
rarecurve
library("vegan")
rarecurve
library(tcltk)
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
View(BySite)
BiodiversityRGUI()
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
View(dune)
View(dune.env)
library(Rcmdr)
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
View(dune)
View(dune)
View(dune.env)
View(Alldates)
write.csv(Alldates, "alldates.csv")
View(Alldates)
SCdates <- read.csv("SC dates.csv")
SCdates <- read.csv("SC dates.csv")
# create a function which takes a number of characters from the right of a string
substringRight <- function(x,n)substr(x, nchar(x)-n+1, nchar(x))
# use this function to take the last 4 characters from every Date value in the data and store the result in the Date column
SCdates$Date <- sapply(SCdates$Date, function(x)substringRight(toString(x), 4))
# rename the 'Date' column to 'Year'
names(SCdates)[names(SCdates) == 'Date'] <- 'Year'
# now the data looks like this:
#
# row.names  Sites           Year     Carabiade..Carabinae..Calosoma
# ---------  -----           ----     ------------------------------
# 1          Timbadola, LP   2008     0
# 2          Timbadola, LP   2008     0
##### General Analysis: Group by Site, add up all species ######
##############################################
Alldates <- SCdates
# eliminate the Year column to group by site
Alldates <- subset(Alldates, select=-Year)
# now do the grouping by the Sites column and apply "sum" to all other columns, thus getting the totals for every column based on the grouping by site
Alldates <- aggregate(. ~ Sites, Alldates, sum)
# set the rownames of Alldates to be the site (before this, the row names are "1","2","3", etc. and after they will be "Dorsbult, MP", "Driekop Forestry Station, MP", etc)
rownames(Alldates) <- Alldates[,1]
# eliminate Sites column because we do not need it anymore (the rownames are now the sites)
Alldates <- subset(Alldates, select=-Sites)
# the data looks like this:
#
# row.names                     Carabiade..Carabinae..Calosoma
# ---------                     ------------------------------
# Dorsbult, MP                  0
# Driekop Forestry Station, MP  0
#### plot rarefaction ##################################
########################################################
# load the functions which are defined in rarec.R - we will use them
source("rarec.R")
# rarefy and plot the Alldates data, using a set of colors for the lines
MultiColors <- c("#fdbf6f","#e7298a","#1f78b4","#000000","#cab2d6","#ff7f00","#b15928","#33a02c","#6a3d9a","#e31a1c","#a6cee3","#cccc7a","#b2df8a","#016c59")
plotR(Alldates, MultiColors)
########################################################
#### Data without 2007 and with both 2008/2009 data
###################################################
# because we can already see which sites we are interested in, we exclude all sites which are not in the list of site which we want
ByYearSiteSp <- SCdates[SCdates$Sites %in% c("Timbadola_LP", "Woodbush_LP", "Mariepskop_Forestry_LP", "Driekop_Forestry_Station_MP", "Klipkraal_MP", "Swaziland", "Dorsbult_MP", "Jessievale_MP"), ]
# remove rows with a Year of 2007 (Swaziland has 2007, 2008 and 2009)
ByYearSiteSp <- subset(ByYearSiteSp, !grepl("2007", SCdates$Year), drop=T)
# group by Year and then by Site
ByYearSiteSp <- aggregate(. ~ Year + Sites, ByYearSiteSp, sum)
# the data in ByYearSiteSp now looks like this:
#
# Year  Sites         Carabiade..Carabinae..Calosoma
# ----  -----         ------------------------------
# 2008  Dorsbult, MP	0
# 2009	Dorsbult, MP	0
# get the rows where the Year is 2008
BySite2008Sp <- subset(ByYearSiteSp, Year=="2008")
# eliminate the Year column
BySite2008Sp <- subset(BySite2008Sp, select=-Year)
# set the rownames of Alldates to be the site (before this, the row names are "1","2","3", etc. and after they will be "Dorsbult, MP", "Driekop Forestry Station, MP", etc)
rownames(BySite2008Sp) <- BySite2008Sp[,1]
# eliminate Sites column because we do not need it anymore (the rownames are now the sites)
BySite2008Sp <- subset(BySite2008Sp, select=-Sites)
# the data looks like this:
# get the rows where the Year is 2009
BySite2009Sp <- subset(ByYearSiteSp, Year=="2009")
# eliminate the Year column
BySite2009Sp <- subset(BySite2009Sp, select=-Year)
# set the rownames of Alldates to be the site (before this, the row names are "1","2","3", etc. and after they will be "Dorsbult, MP", "Driekop Forestry Station, MP", etc)
rownames(BySite2009Sp) <- BySite2009Sp[,1]
# eliminate Sites column because we do not need it anymore (the rownames are now the sites)
BySite2009Sp <- subset(BySite2009Sp, select=-Sites)
# prepare for grouping by site only, by removing the Year column
BySiteSp <- subset(ByYearSiteSp, select=-Year)
# now do the grouping by the Sites column and apply "sum" to all other columns, thus getting the totals for every column based on the grouping by site
BySiteSp <- aggregate(. ~ Sites, BySiteSp, sum)
# set the rownames of Alldates to be the site (before this, the row names are "1","2","3", etc. and after they will be "Dorsbult, MP", "Driekop Forestry Station, MP", etc)
rownames(BySiteSp) <- BySiteSp[,1]
# eliminate Sites column because we do not need it anymore (the rownames are now the sites)
BySiteSp <- subset(BySiteSp, select=-Sites)
View(BySiteSp)
SCdates <- read.csv("SC dates.csv")
# create a function which takes a number of characters from the right of a string
substringRight <- function(x,n)substr(x, nchar(x)-n+1, nchar(x))
# use this function to take the last 4 characters from every Date value in the data and store the result in the Date column
SCdates$Date <- sapply(SCdates$Date, function(x)substringRight(toString(x), 4))
# rename the 'Date' column to 'Year'
names(SCdates)[names(SCdates) == 'Date'] <- 'Year'
# now the data looks like this:
#
# row.names  Sites           Year     Carabiade..Carabinae..Calosoma
# ---------  -----           ----     ------------------------------
# 1          Timbadola, LP   2008     0
# 2          Timbadola, LP   2008     0
##### General Analysis: Group by Site, add up all species ######
##############################################
Alldates <- SCdates
# eliminate the Year column to group by site
Alldates <- subset(Alldates, select=-Year)
# now do the grouping by the Sites column and apply "sum" to all other columns, thus getting the totals for every column based on the grouping by site
Alldates <- aggregate(. ~ Sites, Alldates, sum)
# set the rownames of Alldates to be the site (before this, the row names are "1","2","3", etc. and after they will be "Dorsbult, MP", "Driekop Forestry Station, MP", etc)
rownames(Alldates) <- Alldates[,1]
# eliminate Sites column because we do not need it anymore (the rownames are now the sites)
Alldates <- subset(Alldates, select=-Sites)
# the data looks like this:
#
# row.names                     Carabiade..Carabinae..Calosoma
# ---------                     ------------------------------
# Dorsbult, MP                  0
# Driekop Forestry Station, MP  0
#### plot rarefaction ##################################
########################################################
# load the functions which are defined in rarec.R - we will use them
source("rarec.R")
# rarefy and plot the Alldates data, using a set of colors for the lines
MultiColors <- c("#fdbf6f","#e7298a","#1f78b4","#000000","#cab2d6","#ff7f00","#b15928","#33a02c","#6a3d9a","#e31a1c","#a6cee3","#cccc7a","#b2df8a","#016c59")
plotR(Alldates, MultiColors)
########################################################
#### Data without 2007 and with both 2008/2009 data
###################################################
# because we can already see which sites we are interested in, we exclude all sites which are not in the list of site which we want
ByYearSiteSp <- SCdates[SCdates$Sites %in% c("Timbadola_LP", "Woodbush_LP", "Mariepskop_Forestry_LP", "Driekop_Forestry_Station_MP", "Klipkraal_MP", "Swaziland", "Dorsbult_MP", "Jessievale_MP"), ]
# remove rows with a Year of 2007 (Swaziland has 2007, 2008 and 2009)
ByYearSiteSp <- subset(ByYearSiteSp, !grepl("2007", SCdates$Year), drop=T)
# group by Year and then by Site
ByYearSiteSp <- aggregate(. ~ Year + Sites, ByYearSiteSp, sum)
View(ByYearSiteSp)
SCdates <- read.csv("SC dates.csv")
# create a function which takes a number of characters from the right of a string
substringRight <- function(x,n)substr(x, nchar(x)-n+1, nchar(x))
# use this function to take the last 4 characters from every Date value in the data and store the result in the Date column
SCdates$Date <- sapply(SCdates$Date, function(x)substringRight(toString(x), 4))
# rename the 'Date' column to 'Year'
names(SCdates)[names(SCdates) == 'Date'] <- 'Year'
# now the data looks like this:
#
# row.names  Sites           Year     Carabiade..Carabinae..Calosoma
# ---------  -----           ----     ------------------------------
# 1          Timbadola, LP   2008     0
# 2          Timbadola, LP   2008     0
##### General Analysis: Group by Site, add up all species ######
##############################################
Alldates <- SCdates
# eliminate the Year column to group by site
Alldates <- subset(Alldates, select=-Year)
# now do the grouping by the Sites column and apply "sum" to all other columns, thus getting the totals for every column based on the grouping by site
Alldates <- aggregate(. ~ Sites, Alldates, sum)
# set the rownames of Alldates to be the site (before this, the row names are "1","2","3", etc. and after they will be "Dorsbult, MP", "Driekop Forestry Station, MP", etc)
rownames(Alldates) <- Alldates[,1]
# eliminate Sites column because we do not need it anymore (the rownames are now the sites)
Alldates <- subset(Alldates, select=-Sites)
# the data looks like this:
#
# row.names                     Carabiade..Carabinae..Calosoma
# ---------                     ------------------------------
# Dorsbult, MP                  0
# Driekop Forestry Station, MP  0
#### plot rarefaction ##################################
########################################################
# load the functions which are defined in rarec.R - we will use them
source("rarec.R")
# rarefy and plot the Alldates data, using a set of colors for the lines
MultiColors <- c("#fdbf6f","#e7298a","#1f78b4","#000000","#cab2d6","#ff7f00","#b15928","#33a02c","#6a3d9a","#e31a1c","#a6cee3","#cccc7a","#b2df8a","#016c59")
plotR(Alldates, MultiColors)
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
setwd("~/")
setwd("~/")
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
View(dune)
View(dune.env)
??specaccum
??accumresult
secaccum
specaccum
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
dune.env$site.totals <- apply(dune,1,sum)
library(dune)
View(dune)
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
dune.env$site.totals <- apply(dune,1,sum)
Accum.3 <- accumresult(dune, y=dune.env, scale='site.totals',
method='exact')
Accum.3
accumplot(Accum.3, xlab='pooled individuals')
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
Diversity.5 <- diversityresult(dune, index='Jack.1')
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
View(dune.env)
View(dune)
View(dune.env)
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
View(dune)
View(dune.env)
apply(dune,1,sum)
View(dune.env)
quartz()
dgdfsf
jklhjkhg
library("BiodiversityR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
BiodiversityRGUI()
View(sites)
sites <- read.csv("sites.csv", row.names=1, colClasses=c("color"="character","alternatecolor"="character"))
View(sc1)
View(sites)
sites <- read.csv("sites.csv", row.names=1, colClasses=c("color"="character","alternatecolor"="character"))
View(sites)
View(sites)
sites <- read.csv("sites.csv", row.names=1, colClasses=c("color"="character","alternatecolor"="character"))
sites <- read.csv("sites.csv", row.names=1, colClasses=c("color"="character","alternatecolor"="character"))
setwd("~/Desktop/SC Data")
sites <- read.csv("sites.csv", row.names=1, colClasses=c("color"="character","alternatecolor"="character"))
View(sites)
View(sites)
setwd("~/Desktop/Acacia Insects data/csv")
read.csv("all_Acacia.csv")
