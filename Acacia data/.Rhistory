host_season <- list(
bw_summer = prepareBySeasonHost(bw_vs_all, 'A_mearnsii', 'Summer'),
bw_spring = prepareBySeasonHost(bw_vs_all, 'A_mearnsii', 'Spring'),
bw_winter = prepareBySeasonHost(bw_vs_all, 'A_mearnsii', 'Winter'),
vs_summer = prepareBySeasonHost(bw_vs_all, 'A_sieberiana', 'Summer'),
vs_spring = prepareBySeasonHost(bw_vs_all, 'A_sieberiana', 'Spring'),
vs_winter = prepareBySeasonHost(bw_vs_all, 'A_sieberiana', 'Winter')
)
region_season <- list(
KZN_summer = prepareByRegionSeason(bw_vs_all, 'KZN', 'Summer'),
KZN_spring = prepareByRegionSeason(bw_vs_all, 'KZN', 'Spring'),
KZN_winter = prepareByRegionSeason(bw_vs_all, 'KZN', 'Winter'),
MP_summer = prepareByRegionSeason(bw_vs_all, 'MP', 'Summer'),
MP_spring = prepareByRegionSeason(bw_vs_all, 'MP', 'Spring'),
MP_winter = prepareByRegionSeason(bw_vs_all, 'MP', 'Winter')
)
bw_season_region <- list(
Summer = prepareBySeasonHostRegion(bw_vs_all, "A_mearnsii", "Summer"),
Spring = prepareBySeasonHostRegion(bw_vs_all, "A_mearnsii", "Spring"),
Winter = prepareBySeasonHostRegion(bw_vs_all, "A_mearnsii", "Winter")
)
host_season_taxa <- list(
bw_ants_summer = prepareBySeasonHost(bw_vs_all.ants, 'A_mearnsii', 'Summer'),
bw_ants_spring = prepareBySeasonHost(bw_vs_all.ants, 'A_mearnsii', 'Spring'),
bw_ants_winter = prepareBySeasonHost(bw_vs_all.ants, 'A_mearnsii', 'Winter'),
bw_coleoptera_summer = prepareBySeasonHost(bw_vs_all.coleoptera, 'A_mearnsii', 'Summer'),
bw_coleoptera_spring = prepareBySeasonHost(bw_vs_all.coleoptera, 'A_mearnsii', 'Spring'),
bw_coleoptera_winter = prepareBySeasonHost(bw_vs_all.coleoptera, 'A_mearnsii', 'Winter'),
bw_hemiptera_summer = prepareBySeasonHost(bw_vs_all.hemiptera, 'A_mearnsii', 'Summer'),
bw_hemiptera_spring = prepareBySeasonHost(bw_vs_all.hemiptera, 'A_mearnsii', 'Spring'),
bw_hemiptera_winter = prepareBySeasonHost(bw_vs_all.hemiptera, 'A_mearnsii', 'Winter'),
vs_ants_summer = prepareBySeasonHost(bw_vs_all.ants, 'A_sieberiana', 'Summer'),
vs_ants_spring = prepareBySeasonHost(bw_vs_all.ants, 'A_sieberiana', 'Spring'),
vs_ants_winter = prepareBySeasonHost(bw_vs_all.ants, 'A_sieberiana', 'Winter'),
vs_coleoptera_summer = prepareBySeasonHost(bw_vs_all.coleoptera, 'A_sieberiana', 'Summer'),
vs_coleoptera_spring = prepareBySeasonHost(bw_vs_all.coleoptera, 'A_sieberiana', 'Spring'),
vs_coleoptera_winter = prepareBySeasonHost(bw_vs_all.coleoptera, 'A_sieberiana', 'Winter'),
vs_hemiptera_summer = prepareBySeasonHost(bw_vs_all.hemiptera, 'A_sieberiana', 'Summer'),
vs_hemiptera_spring = prepareBySeasonHost(bw_vs_all.hemiptera, 'A_sieberiana', 'Spring'),
vs_hemiptera_winter = prepareBySeasonHost(bw_vs_all.hemiptera, 'A_sieberiana', 'Winter')
)
host_season_taxa.iNEXT <- list()
host_season_taxa.iNEXT$bw_ants_summer = iNEXT(apply(host_season_taxa$bw_ants_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$bw_ants_spring = iNEXT(apply(host_season_taxa$bw_ants_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
# error
host_season_taxa.iNEXT$bw_ants_winter = iNEXT(apply(host_season_taxa$bw_ants_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=50)
host_season_taxa.iNEXT$bw_coleoptera_summer = iNEXT(apply(host_season_taxa$bw_coleoptera_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$bw_coleoptera_spring = iNEXT(apply(host_season_taxa$bw_coleoptera_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$bw_coleoptera_winter = iNEXT(apply(host_season_taxa$bw_coleoptera_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$bw_hemiptera_summer = iNEXT(apply(host_season_taxa$bw_hemiptera_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$bw_hemiptera_spring = iNEXT(apply(host_season_taxa$bw_hemiptera_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$bw_hemiptera_winter = iNEXT(apply(host_season_taxa$bw_hemiptera_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$vs_ants_summer = iNEXT(apply(host_season_taxa$vs_ants_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$vs_ants_spring = iNEXT(apply(host_season_taxa$vs_ants_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$vs_ants_winter = iNEXT(apply(host_season_taxa$vs_ants_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$vs_coleoptera_summer = iNEXT(apply(host_season_taxa$vs_coleoptera_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$vs_coleoptera_spring = iNEXT(apply(host_season_taxa$vs_coleoptera_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$vs_coleoptera_winter = iNEXT(apply(host_season_taxa$vs_coleoptera_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$vs_hemiptera_summer = iNEXT(apply(host_season_taxa$vs_hemiptera_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$vs_hemiptera_spring = iNEXT(apply(host_season_taxa$vs_hemiptera_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season_taxa.iNEXT$vs_hemiptera_winter = iNEXT(apply(host_season_taxa$vs_hemiptera_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season.iNEXT <- list()
host_season.iNEXT$bw_summer = iNEXT(apply(host_season$bw_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season.iNEXT$bw_spring = iNEXT(apply(host_season$bw_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season.iNEXT$bw_winter = iNEXT(apply(host_season$bw_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season.iNEXT$vs_summer = iNEXT(apply(host_season$vs_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season.iNEXT$vs_spring = iNEXT(apply(host_season$vs_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
host_season.iNEXT$vs_winter = iNEXT(apply(host_season$vs_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
region_season.iNEXT <- list()
region_season.iNEXT$KZN_summer = iNEXT(apply(region_season$KZN_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
region_season.iNEXT$KZN_spring = iNEXT(apply(region_season$KZN_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
region_season.iNEXT$KZN_winter = iNEXT(apply(region_season$KZN_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
region_season.iNEXT$MP_summer = iNEXT(apply(region_season$MP_summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
region_season.iNEXT$MP_spring = iNEXT(apply(region_season$MP_spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
region_season.iNEXT$MP_winter = iNEXT(apply(region_season$MP_winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
bw_season_region.iNEXT = list()
bw_season_region.iNEXT$Summer = iNEXT(apply(bw_season_region$Summer, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
bw_season_region.iNEXT$Spring = iNEXT(apply(bw_season_region$Spring, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
bw_season_region.iNEXT$Winter = iNEXT(apply(bw_season_region$Winter, 1, as.numeric), q=0, datatype="incidence_freq", nboot=5000)
library(xlsx)
iNEXTtoExcel <- function(data, file) {
write.xlsx(data$DataInfo, file=file, sheetName="DataInfo")
write.xlsx(data$BasicIndex, file=file, sheetName="BasicIndex", append=TRUE)
sapply(names(data$Accumulation), function(x) {
write.xlsx(data$Accumulation[[x]], file=file, sheetName=x, append=TRUE)
})
}
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.xlsx")
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.7.xlsx")
iNEXTtoExcel(bw_vs_site_host.iNEXT.10, "Output/bw_vs_site_host.iNEXT.10.xlsx")
iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.spring.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.spring.7.xlsx")
iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.7.xlsx")
iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.winter.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.winter.7.xlsx")
# Produces: Error in rmultinom(B, n, pi.star) : NA in probability vector
#bw_vs.bytree <- bw_vs_all
#rownames(bw_vs.bytree) <- do.call(paste, c(bw_vs.bytree[c("Sample", "Season")], sep = "_"))
#bw_vs.bytree <- subset(bw_vs.bytree, select = -c(Host, Sample, Season))
#bw_vs.bytree <- bw_vs.bytree[rowSums(bw_vs.bytree) != 0, ]
#bw_vs.bytree.iNEXT <- iNEXT(apply(bw_vs.bytree, 1, function(x) { sort(as.numeric(x[x!=0]), decreasing=T) }), q=c(0, 1, 2), datatype="abundance")
library(xlsx)
install.packages("xlsx")
library(xlsx)
iNEXTtoExcel <- function(data, file) {
write.xlsx(data$DataInfo, file=file, sheetName="DataInfo")
write.xlsx(data$BasicIndex, file=file, sheetName="BasicIndex", append=TRUE)
sapply(names(data$Accumulation), function(x) {
write.xlsx(data$Accumulation[[x]], file=file, sheetName=x, append=TRUE)
})
}
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.xlsx")
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.7.xlsx")
iNEXTtoExcel(bw_vs_site_host.iNEXT.10, "Output/bw_vs_site_host.iNEXT.10.xlsx")
iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.spring.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.spring.7.xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
library("rJava")
library(xlsx)
install.packages("rJava")
library(xlsx)
library("rJava")
library(xlsx)
library("rJava")
save.image(file="2019.01.21_reruncodeusingincidence_freq.rdata")
.rs.restartR()
library("rJava")
install.packages("rJava")
library("rJava")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_201\\bin')
library("rJava")
install.packages("rJava")
library("rJava")
install.packages("~/EndnoteAutoImport/rJava_0.9-10.zip", repos = NULL, type = "win.binary")
library(xlsx)
remove.packages("rJava")
install.packages("~/EndnoteAutoImport/rJava_0.9-10.zip", repos = NULL, type = "win.binary")
install.packages("~/EndnoteAutoImport/rJava_0.9-10.zip", repos = NULL, type = "win.binary", lib="C:/Program Files/R/R-3.5.1/library")
library("rJava")
#save.image(file="2019.01.21_reruncodeusingincidence_freq.rdata")
load(file="2019.01.21_reruncodeusingincidence_freq.rdata")
date()
?
file <- paste(file, "_DataInfo", )
year()
format(date(), format="%B %d %Y")
format(date(), format="%Y%m%d")
format(date(), format="%Y%m%d")
format(date(), format="%Y% m %d")
date()
d
d<-date()
format(date, format="%Y% m %d")
format(date, format="%Y% m %d")
d<-Sys.Date()
format(d, format="%Y% m %d")
format(d, format="%Y%m%d")
format(d, format="%Y.%m.%d")
d<-
format(Sys.Date(), format="%Y.%m.%d")
format(Sys.Date(), format="%Y.%m.%d")
paste0(file, "_DataInfo", format(Sys.Date(), format="%Y.%m.%d") )
file="aa"
file <- paste0(file, "_DataInfo", format(Sys.Date(), format="%Y.%m.%d") )
file
bw_vs_site_host.iNEXT.enoughtrees.summer
bw_vs_site_host.iNEXT.enoughtrees.spring.7$Accumulation
str(bw_vs_site_host.iNEXT.enoughtrees.spring.7)
str(bw_vs_site_host.iNEXT.enoughtrees.spring.7$AsyEst
bw_vs_site_host.iNEXT.enoughtrees.spring.7$AsyEst
bw_vs_site_host.iNEXT.enoughtrees.spring.7
bw_vs_site_host.iNEXT.enoughtrees.spring.7$AsyEst
bw_vs_site_host.iNEXT.enoughtrees.spring.7$iNextEst
iNEXTtoExcel <- function(data, file)
file1 <- paste0(file, "_DataInfo", format(Sys.Date(), format="%Y.%m.%d") )
file2 <- paste0(file, "_AsyEst", format(Sys.Date(), format="%Y.%m.%d") )
file3 <- paste0(file, "_iNextEst", format(Sys.Date(), format="%Y.%m.%d") )
write.csv(data$DataInfo, file=file1) # , sheetName="DataInfo")
iNEXTtoExcel <- function(data, file){
file1 <- paste0(file, "_DataInfo", format(Sys.Date(), format="%Y.%m.%d") )
file2 <- paste0(file, "_AsyEst", format(Sys.Date(), format="%Y.%m.%d") )
file3 <- paste0(file, "_iNextEst", format(Sys.Date(), format="%Y.%m.%d") )
write.csv(data$DataInfo, file=file1) # , sheetName="DataInfo")
write.csv(data$AsyEst, file=file2)#, sheetName="BasicIndex", append=TRUE)
sapply(names(data$iNextEst), function(x) {
write.csv(data$iNextEst[[x]], file=paste0(file3, "_", x))
})
}
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.xlsx")
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.7.xlsx")
iNEXTtoExcel(bw_vs_site_host.iNEXT.10, "Output/bw_vs_site_host.iNEXT.10.xlsx")
bw_vs_site_host.iNEXT.10
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.xlsx")
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.7.xlsx")
iNEXTtoExcel(bw_vs_site_host.iNEXT.10, "Output/bw_vs_site_host.iNEXT.10")
iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.spring.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.spring.7.xlsx")
bw_vs_site_host.iNEXT.enoughtrees.spring.7$
browseURL(getwd())
getwd()
bw_vs_site_host.iNEXT.enoughtrees.spring.7$
browseURL(getwd())
iNEXTtoExcel <- function(data, file){
file1 <- paste0(file, "_DataInfo", format(Sys.Date(), format="%Y.%m.%d"), ".csv" )
file2 <- paste0(file, "_AsyEst", format(Sys.Date(), format="%Y.%m.%d") , ".csv" )
file3 <- paste0(file, "_iNextEst", format(Sys.Date(), format="%Y.%m.%d"), ".csv"  )
write.csv(data$DataInfo, file=file1) # , sheetName="DataInfo")
write.csv(data$AsyEst, file=file2)#, sheetName="BasicIndex", append=TRUE)
sapply(names(data$iNextEst), function(x) {
write.csv(data$iNextEst[[x]], file=paste0(file3, "_", x, ".csv"))
})
}
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.xlsx")
#iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.7.xlsx")
iNEXTtoExcel(bw_vs_site_host.iNEXT.10, "Output/bw_vs_site_host.iNEXT.10")
iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.spring.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.spring.7")
iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.summer.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.summer.7")
iNEXTtoExcel(bw_vs_site_host.iNEXT.enoughtrees.winter.7, "Output/bw_vs_site_host.iNEXT.enoughtrees.winter.7")
png("Output/BW Rarefaction All.png", width=1300, height=600)
ggiNEXT(bw_sample.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
library(iNEXT)
library(ggplot2)
library(grid)
library(gridExtra)
?ggiNEXT
ggiNEXT(bw_sample.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
dev.off()
png("Output/BW Rarefaction Ants.png", width=1300, height=600)
ggiNEXT(bw_sample.ants.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
dev.off()
png("Output/BW Rarefaction Coleoptera.png", width=1300, height=600)
ggiNEXT(bw_sample.coleoptera.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
dev.off()
png("Output/BW Rarefaction Coleoptera.png", width=1300, height=600)
ggiNEXT(bw_sample.coleoptera.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
dev.off()
png("Output/BW Rarefaction Hemiptera.png", width=1300, height=600)
ggiNEXT(bw_sample.hemiptera.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
dev.off()
png("Output/BW_VS Rarefaction ALL.png", width=1300, height=600)
ggiNEXT(bw_vs_site_host.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
plotExpectedDiversity <- function(data.iNEXT, cut.point, title = NULL, sub = NULL, q = c(0,1,2), sort = NULL, legend = T, ylim = NULL) {
rare10 <- do.call("rbind", lapply(data.iNEXT$Accumulation, function(x) { unique(x[x$t == cut.point, ]) }))
order0 <- order(subset(rare10, order==0)$qD)
if (!missing(sort))
order0 <- match(sort, names(data.iNEXT$Accumulation))
.par.mar <- par("mar")
.par.oma <- par("oma")
xx=1:length(order0)
#quartz(height=8, width=8)
numcells <- max(q) + 1
if (legend)
numcells <- numcells + 1
if (numcells > 1) {
par(mfrow=c(ceiling(numcells / 2),ceiling(numcells / 2)))
par(mar=c(5,4,1,1))
if (missing(title))
par(oma=c(6,4,1,1))
else
par(oma=c(6,4,4,1))
}
i <- 1
for (i in (q + 1)){
if (numcells > 1)
if (i==1) par(mar=c(1,4,5,1)) else par(mar=c(5,4,1,1))
tmp <- subset(rare10, order==(i-1))[order0,]
if (missing(ylim))
tmpylim <- c(floor(min(tmp$qD.95.LCL) / 10) * 10, ceiling(max(tmp$qD.95.UCL) / 10) * 10)
else
tmpylim <- ylim
plot(xx, tmp$qD.95.UCL, xlab="", ylab="", axes=F, type="n", ylim=tmpylim)
with(tmp, arrows(xx, qD.95.LCL, xx, qD.95.UCL, code=3, length=.03, angle=90) )
with(tmp, points(xx, qD, pch=c(19,5,4)[factor(tmp$method, levels = c("interpolated", "observed", "extrapolated"))]))
if (i!=1 || length(q) == 1) axis(1, las=2, at=xx, labels=paste(names(data.iNEXT$Accumulation)[order0]))
axis(2,las=2, cex.axis=1.3)
box(bty="L", lwd=1.6)
subTitle <- paste0("q=",(i-1))
if (!missing(sub))
subTitle <- paste(sub, subTitle, sep = " ")
mtext(side=3, font=2, subTitle, line=-1)
if (i==1 && legend) {
plot(1,1, xlab="", ylab="", axes=F, type="n")
legend("top", pch = c(19,5,4), legend=c("Rarefied", "Observed", "Extrapolated"), bty="n",
title = paste("For sample count =", cut.point), cex=1.3,inset=c(0,.15))
}
}
if (numcells > 1)
mtext(outer=TRUE, "Site", side=1, cex=1.4, line=1.25)
mtext(outer=TRUE, expression(paste("Expected diversity (" ^plain("q"), plain("D)"))), side=2, cex=1.4, line=-1, las=0)
if (!missing(title))
mtext(outer = TRUE, title, side = 3, cex=1.4, line=1.25)
if (numcells > 1)
par(mar = .par.mar, oma = .par.oma)
names(data.iNEXT$Accumulation)[order0]
}
pdf("Output/BW_VS Site Host Expected Diversity (n=10).pdf", width = 8, height = 8, useDingbats = F)
plotExpectedDiversity(bw_vs_site_host.iNEXT.10, 10)
plotExpectedDiversity(bw_vs_site_host.iNEXT.10, 10)
dev.off()
pdf("Output/BW_VS Site Host Expected Diversity (n=15).pdf", width = 8, height = 8, useDingbats = F)
plotExpectedDiversity(bw_vs_site_host.iNEXT.15, 15)
dev.off()
pdf("Output/BW_VS Site Host Expected Diversity (n=20).pdf", width = 8, height = 8, useDingbats = F)
plotExpectedDiversity(bw_vs_site_host.iNEXT.20, 20)
dev.off()
ggiNEXT(bw_vs_site_host.iNEXT.enoughtrees.summer, type = "1", facet.var = "order")
ggiNEXT(bw_vs_site_host.iNEXT.enoughtrees.spring, type = "1", facet.var = "order")
ggiNEXT(bw_vs_site_host.iNEXT.enoughtrees.winter, type = "1", facet.var = "order")
pdf("Output/BW_VS Site Host Season Expected Diversity (n=7).pdf", width = 8, height = 8, useDingbats = F)
plotExpectedDiversity(bw_vs_site_host.iNEXT.enoughtrees.summer.7, 7, "Summer")
plotExpectedDiversity(bw_vs_site_host.iNEXT.enoughtrees.spring.7, 7, "Spring")
plotExpectedDiversity(bw_vs_site_host.iNEXT.enoughtrees.winter.7, 7, "Winter")
dev.off()
pdf("Output/BW_VS Site Host Season Expected Richness q=0.pdf", width = 8, height = 8, useDingbats = F)
.pardefault <- par(no.readonly = T)
par(mfrow=c(2,2))
par(oma=c(6,4,1,1))
#par(mar=c(1,4,5,1))
bw_vs_site_host.iNEXT.10.sort <- plotExpectedDiversity(bw_vs_site_host.iNEXT.10, 10, ylim = c(10, 120), q = 0, sub = "Overall", legend = F)
#par(mar=c(5,4,1,1))
plotExpectedDiversity(bw_vs_site_host.iNEXT.enoughtrees.spring.7, 7, q = 0, sub = "Spring", sort = bw_vs_site_host.iNEXT.10.sort, legend = F, ylim = c(10, 120))
plotExpectedDiversity(bw_vs_site_host.iNEXT.enoughtrees.summer.7, 7, q = 0, sub = "Summer", sort = bw_vs_site_host.iNEXT.10.sort, legend = F, ylim = c(10, 120))
plotExpectedDiversity(bw_vs_site_host.iNEXT.enoughtrees.winter.7, 7, q = 0, sub = "Winter", sort = bw_vs_site_host.iNEXT.10.sort, legend = F, ylim = c(10, 120))
par(.pardefault)
dev.off()
pdf("Output/BW_VS Rarefaction By Host.pdf", width = 20, height = 7, useDingbats = F)
ggiNEXT(bw_vs_host.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
dev.off()
pdf("Output/BW_VS Rarefaction By Host Region.pdf", width = 20, height = 7, useDingbats = F)
ggiNEXT(bw_vs_region_host.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
ggiNEXT(bw_vs_region_host.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18) + xlim(0, 150)
pdf("Output/BW_VS Rarefaction By Host Region MP3_4 KZN2_3.pdf", width = 20, height = 7, useDingbats = F)
ggiNEXT(bw_vs_region_host.MP34KZN23.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
ggiNEXT(bw_vs_region_host.summer.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
dev.off()
pdf("Output/BW_VS Rarefaction By Host Region Summer.pdf", width = 20, height = 7, useDingbats = F)
dev.off()
dev.off()
pdf("Output/BW_VS Rarefaction By Host Region Winter.pdf", width = 20, height = 7, useDingbats = F)
ggiNEXT(bw_vs_region_host.winter.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
dev.off()
pdf("Output/BW_VS Rarefaction By Host Region Spring.pdf", width = 20, height = 7, useDingbats = F)
ggiNEXT(bw_vs_region_host.spring.iNEXT, type=1, facet.var="order") + labs(x="Number of trees") + theme_bw(base_size = 18)
dev.off()
host_season_taxa.iNEXT.palette <- scale_colour_manual("Order", values = c(
"MP1" = "#F1A340", "MP2" = "#F1A340", "MP3" = "#F1A340",
"MP4" = "#F1A340", "MP5" = "#F1A340", "MP6" = "#F1A340",
"MP7" = "#F1A340", "KZN1" = "#998EC3", "KZN2" = "#998EC3",
"KZN3" = "#998EC3", "KZN4" = "#998EC3", "KZN5" = "#998EC3",
"KZN6" = "#998EC3", "KZN7" = "#998EC3"
))
pdf("Output/BW Rarefaction Season Taxa.pdf", width = 20, height = 14, useDingbats = F)
grid.arrange(
ncol = 3,
top = "A_mearnsii",
ggiNEXT(host_season_taxa.iNEXT$bw_ants_summer, type=1, facet.var="order", se = F) + labs(x="", y = "Formicidae", title = "Summer") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$bw_ants_spring, type=1, facet.var="order", se = F) + labs(x="", y = "", title = "Spring") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
#ggiNEXT(host_season_taxa.iNEXT$bw_ants_winter, type=1, facet.var="order", se = F) + labs(x="", y = "", title = "Winter") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
grob(),
ggiNEXT(host_season_taxa.iNEXT$bw_coleoptera_summer, type=1, facet.var="order", se = F) + labs(x="", y = "Coleoptera") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$bw_coleoptera_spring, type=1, facet.var="order", se = F) + labs(x="", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$bw_coleoptera_winter, type=1, facet.var="order", se = F) + labs(x="", y = "", title = "Winter") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$bw_hemiptera_summer, type=1, facet.var="order", se = F) + labs(x="", y = "Hemiptera") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$bw_hemiptera_spring, type=1, facet.var="order", se = F) + labs(x="Number of trees", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$bw_hemiptera_winter, type=1, facet.var="order", se = F) + labs(x="", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
layout_matrix = rbind(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))
)
dev.off()
pdf("Output/VS Rarefaction Season Taxa.pdf", width = 20, height = 14, useDingbats = F)
grid.arrange(
ncol = 3,
top = "A_sieberiana",
ggiNEXT(host_season_taxa.iNEXT$vs_ants_summer, type=1, facet.var="order", se = F) + labs(x="", y = "Formicidae", title = "Summer") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$vs_ants_spring, type=1, facet.var="order", se = F) + labs(x="", y = "", title = "Spring") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$vs_ants_winter, type=1, facet.var="order", se = F) + labs(x="", y = "", title = "Winter") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$vs_coleoptera_summer, type=1, facet.var="order", se = F) + labs(x="", y = "Coleoptera") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$vs_coleoptera_spring, type=1, facet.var="order", se = F) + labs(x="", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$vs_coleoptera_winter, type=1, facet.var="order", se = F) + labs(x="", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$vs_hemiptera_summer, type=1, facet.var="order", se = F) + labs(x="", y = "Hemiptera") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$vs_hemiptera_spring, type=1, facet.var="order", se = F) + labs(x="Number of trees", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season_taxa.iNEXT$vs_hemiptera_winter, type=1, facet.var="order", se = F) + labs(x="", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette
)
dev.off()
pdf("Output/BW_VS Rarefaction Season.pdf", width = 20, height = 10, useDingbats = F)
grid.arrange(
ncol = 3,
top = "A_mearnsii and A_sieberiana",
ggiNEXT(host_season.iNEXT$bw_summer, type=1, facet.var="order", se = F) + labs(x="", y = "A_mearnsii", title = "Summer") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season.iNEXT$bw_spring, type=1, facet.var="order", se = F) + labs(x="", y = "", title = "Spring") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season.iNEXT$bw_winter, type=1, facet.var="order", se = F) + labs(x="", y = "", title = "Winter") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season.iNEXT$vs_summer, type=1, facet.var="order", se = F) + labs(x="", y = "A_sieberiana") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season.iNEXT$vs_spring, type=1, facet.var="order", se = F) + labs(x="Number of trees", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette,
ggiNEXT(host_season.iNEXT$vs_winter, type=1, facet.var="order", se = F) + labs(x="", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + host_season_taxa.iNEXT.palette
)
dev.off()
pdf("Output/BW_VS Rarefaction Region Season.pdf", width = 20, height = 10, useDingbats = F)
grid.arrange(
ncol = 3,
top = "Region, Season",
left = "Morphospecies richness",
ggiNEXT(region_season.iNEXT$KZN_summer, type=1, facet.var="order") + labs(x="", y = "KZN", title = "Summer") + theme_bw(base_size = 18) + guides(linetype = FALSE) + expand_limits(x = 100, y = 200),
ggiNEXT(region_season.iNEXT$KZN_spring, type=1, facet.var="order") + labs(x="", y = "", title = "Spring") + theme_bw(base_size = 18) + guides(linetype = FALSE) + expand_limits(x = 100, y = 200),
ggiNEXT(region_season.iNEXT$KZN_winter, type=1, facet.var="order") + labs(x="", y = "", title = "Winter") + theme_bw(base_size = 18) + guides(linetype = FALSE) + expand_limits(x = 100, y = 200),
ggiNEXT(region_season.iNEXT$MP_summer, type=1, facet.var="order") + labs(x="", y = "MP") + theme_bw(base_size = 18) + guides(linetype = FALSE) + expand_limits(x = 100, y = 200),
ggiNEXT(region_season.iNEXT$MP_spring, type=1, facet.var="order") + labs(x="Number of trees", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + expand_limits(x = 100, y = 200),
ggiNEXT(region_season.iNEXT$MP_winter, type=1, facet.var="order") + labs(x="", y = "") + theme_bw(base_size = 18) + guides(linetype = FALSE) + expand_limits(x = 100, y = 200)
)
dev.off()
pdf("Output/BW Rarefaction Season Region.pdf", width = 20, height = 5, useDingbats = F)
grid.arrange(
ncol = 3,
top = "Season, Region",
left = "Morphospecies richness",
ggiNEXT(bw_season_region.iNEXT$Summer, type=1, facet.var="order") + labs(x="", y = "", title = "Summer") + theme_bw(base_size = 18) + guides(linetype = FALSE) + expand_limits(x = 100, y = 200),
ggiNEXT(bw_season_region.iNEXT$Spring, type=1, facet.var="order") + labs(x="", y = "", title = "Spring") + theme_bw(base_size = 18) + guides(linetype = FALSE) + expand_limits(x = 100, y = 200),
ggiNEXT(bw_season_region.iNEXT$Winter, type=1, facet.var="order") + labs(x="", y = "", title = "Winter") + theme_bw(base_size = 18) + guides(linetype = FALSE) + expand_limits(x = 100, y = 200)
)
dev.off()
#ggiNEXT(bw_vs.bytree.iNEXT, type=1, facet.var="order")
#ggiNEXT(bw_vs.bytree.iNEXT, type=1, facet.var="order")
#ggiNEXT(bw_vs.bytree.iNEXT, type=1, facet.var="order")
#ggiNEXT(bw_vs.bytree.iNEXT, type=1, facet.var="order")
ggiNEXT
region_season
bw_vs_all
bw_vs_all
bw_vs_all
prepareAcaciaBySiteHost(bw_vs_all)
categoriseLandUse
save.image()
bw_vs_all_Am.vs.VS <- read.csv("bw_vs_all.csv")
bw_vs_all$Sample
grep(c("MP3", "MP4", "KZN2" ,  "KZN3"), bw_vs_all$Sample
)
grep(c("MP3|MP4|KZN2|KZN3"), bw_vs_all$Sample)
Am_adjacents <_ grep(c("MP3|MP4|KZN2|KZN3"), bw_vs_all$Sample)
Am_adjacentRows <-  <- grep(c("MP3|MP4|KZN2|KZN3"), bw_vs_all$Sample)
Am_adjacentRows <- grep(c("MP3|MP4|KZN2|KZN3"), bw_vs_all$Sample)
Am_adjacentRows
bw_vs_all[Am_adjacentRows, ]
bw_vs_all
read.csv("bw_vs_all.csv")
View(bw_vs_all[Am_adjacentRows,])
View(bw_vs_all[Am_adjacentRows,])
intersect(
grep(c("MP3|MP4|KZN2|KZN3"), bw_vs_all$Sample),
grep(c("A_mearnsii"), bw_vs_all$Host)
)
Am_adjacentRows <- intersect(
grep(c("MP3|MP4|KZN2|KZN3"), bw_vs_all$Sample),
grep(c("A_mearnsii"), bw_vs_all$Host))
View(bw_vs_all[Am_adjacentRows,])
bw_vs_all[Am_adjacentRows,]$Host <- "Am_adjacent"
# exclude Ignota columns
bw_vs_all <- bw_vs_all[,grep("Ignota", names(bw_vs_all), invert = T)]
Am_adjacentRows
# exclude Ignota columns
bw_vs_all <- bw_vs_all[,grep("Ignota", names(bw_vs_all), invert = T)]
# add factor labels
bw_vs_all$Host <- factor(
as.character(bw_vs_all$Host),
levels = c("A_mearnsii", "Am_adjacent", "A_sieberiana")
)
bw_vs_all[Am_adjacentRows,]$Host <- "Am_adjacent"
bw_vs_all
str(bw_vs_all)
with(bw_vs_all, table(Host))
bw_vs_all_Am.vs.Vs <- read.csv("bw_vs_all.csv")
bw_vs_all <- read.csv("bw_vs_all.csv")
bw_vs_all_Am.vs.Vs <- read.csv("bw_vs_all.csv")
Am_adjacentRows <- intersect(
grep(c("MP3|MP4|KZN2|KZN3"), bw_vs_all$Sample),
grep(c("A_mearnsii"), bw_vs_all$Host))
# exclude Ignota columns
bw_vs_all <- bw_vs_all[,grep("Ignota", names(bw_vs_all), invert = T)]
# add factor labels
bw_vs_all$Host <- factor(
as.character(bw_vs_all$Host),
levels = c("A_mearnsii", "Am_adjacent", "A_sieberiana")
)
bw_vs_all[Am_adjacentRows,]$Host <- "Am_adjacent"
bw_vs_all_expanded <- cbind(
Host = bw_vs_all$Host,
Sample = bw_vs_all$Sample,
Site = unlist(lapply(strsplit(as.character(bw_vs_all$Sample), "\\_"), "[[", 1)),
Region = gsub("MPL", "MP", substring(gsub("MP", "MPL",bw_vs_all$Sample),1,3)),
Season = bw_vs_all$Season,
subset(bw_vs_all, select = -c(Host, Sample, Season))
)
bw_vs_all.speciescolumns <- bw_vs_all[,4:length(bw_vs_all)]
bw_vs_all <- read.csv("bw_vs_all.csv")
bw_vs_all <- read.csv("bw_vs_all.csv")
# exclude Ignota columns
bw_vs_all <- bw_vs_all[,grep("Ignota", names(bw_vs_all), invert = T)]
# add factor labels
bw_vs_all$Host <- factor(
as.character(bw_vs_all$Host),
levels = c("A_mearnsii", "A_sieberiana")
)
bw_vs_all_expanded <- cbind(
Host = bw_vs_all$Host,
Sample = bw_vs_all$Sample,
Site = unlist(lapply(strsplit(as.character(bw_vs_all$Sample), "\\_"), "[[", 1)),
Region = gsub("MPL", "MP", substring(gsub("MP", "MPL",bw_vs_all$Sample),1,3)),
Season = bw_vs_all$Season,
subset(bw_vs_all, select = -c(Host, Sample, Season))
)
bw_vs_all.speciescolumns <- bw_vs_all[,4:length(bw_vs_all)]
bw_vs_all.speciescolumns.nosingledoubletons <- bw_vs_all.speciescolumns[!apply(bw_vs_all.speciescolumns, 2, function(col) { length(col[col > 0]) <= 1 })]
bw_vs_adjacent_all
table(bw_vs_adjacent_all$Host)
table(bw_vs_adjacent$Host)
table(bw_vs_all$Host)
