{
    "collab_server" : "",
    "contents" : "library(vegan)\n\naverageColumnsBySeasons <- function(x) {\n  categories <- unique(unlist(lapply(strsplit(names(x)[grepl(\"_(Dec|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov)\", names(x))], \"\\\\_\"), \"[[\", 1)))\n  for (c in categories) {\n    x[,paste(c, \"summer\", sep=\"_\")] <- rowMeans(x[, grep(paste(c, \"(Dec|Jan|Feb)\", sep=\"_\"), names(x))])\n    x[,paste(c, \"autumn\", sep=\"_\")] <- rowMeans(x[, grep(paste(c, \"(Mar|Apr|May)\", sep=\"_\"), names(x))])\n    x[,paste(c, \"winter\", sep=\"_\")] <- rowMeans(x[, grep(paste(c, \"(Jun|Jul|Aug)\", sep=\"_\"), names(x))])\n    x[,paste(c, \"spring\", sep=\"_\")] <- rowMeans(x[, grep(paste(c, \"(Sep|Oct|Nov)\", sep=\"_\"), names(x))])\n  }\n  \n  subset(x, select=-grep(\"(Dec|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov)\", names(x)))\n}\n\nacacia.env <- read.csv(\"Acacia_env/Acacia.env.csv\", row.names=1, stringsAsFactors = F)\n\nacacia.env <- averageColumnsBySeasons(acacia.env)\n\n\ncategoriseLandUse <- function (x, allCategory, categories) {\n  x$landuse <- as.character(x$landuse)\n  \n  #default category\n  x$category <- allCategory\n  \n  #map each category using grep\n  for (i in ls(categories))\n    x$category[grep(categories[[i]],x$landuse)] <- i\n  \n  x\n}\n\ngetPrincipalComponents <- function(x) {\n  #sums across new categories\n  x.agg<-aggregate(Prop ~ ., data=x[,-c(2:3)], sum)\n  #reshapes\n  x.wide <- reshape(x.agg, v.names = \"Prop\", idvar = \"site\",\n                    timevar = \"category\", direction = \"wide\")\n  #NA's to zeros\n  x.wide[is.na(x.wide)] <- 0\n  #sites become rownames\n  rownames(x.wide) <- x.wide$site\n  x.wide <- subset(x.wide, select=-site)\n  \n  # PCA\n  x.prco <- princomp(x.wide)\n  x.axes_variance <- x.prco$sdev ^ 2\n  # print(round(x.axes_variance/sum(x.axes_variance),3)) #prints the proportional variance for each\n  \n  print(round(x.axes_variance/sum(x.axes_variance),3)[1:3]) #prints the proportional variance for first three axes\n  \n  x.firstthreeaxes<-x.prco$scores[,1:3]\n  x.firstthreeaxes\n}\n\nacacia.landuse.250 <- categoriseLandUse(\n  read.csv(\"landuse_acacia/acacia_250m.csv\"),\n  \"Natural\",\n  list(\n    \"Cultivated\" = \"Cultivated\",\n    \"Plantation\" = \"Plantation\",\n    \"Urban\" = \"Urban|Bare none vegetated|Mine\"\n  )\n)\nacacia.landuse.500 <- categoriseLandUse(\n  read.csv(\"landuse_acacia/acacia_500m.csv\"),\n  \"Natural\",\n  list(\n    \"Cultivated\" = \"Cultivated\",\n    \"Plantation\" = \"Plantation\",\n    \"Urban\" = \"Urban|Bare none vegetated|Mine\"\n  )\n)\nacacia.env.pca250 <- getPrincipalComponents(acacia.landuse.250)\nacacia.env.pca500 <- getPrincipalComponents(acacia.landuse.500)\n\nacacia.env.250 <- merge(acacia.env, acacia.env.pca250, by=0, all=TRUE)\nrownames(acacia.env.250) <- acacia.env.250[,1]\nacacia.env.250 <- acacia.env.250[2:length(acacia.env.250)]\n\nacacia.env.500 <- merge(acacia.env, acacia.env.pca500, by=0, all=TRUE)\nrownames(acacia.env.500) <- acacia.env.500[,1]\nacacia.env.500 <- acacia.env.500[2:length(acacia.env.500)]\n\nacacia.env.trans250 <- read.csv(\"landuse_acacia/acacia_trans_250m.csv\")\nacacia.env.250 <- cbind(acacia.env.250, trans_250 = acacia.env.trans250[acacia.env.trans250$transformed_land == \"Transformed\", ]$Prop)\n\nacacia.env.trans500 <- read.csv(\"landuse_acacia/acacia_trans_500m.csv\")\nacacia.env.500 <- cbind(acacia.env.500, trans_500 = acacia.env.trans500[acacia.env.trans500$transformed_land == \"Transformed\", ]$Prop)\n\nwrite.csv(acacia.env.250, \"Acacia_env/acacia.env.final.250.csv\")\nwrite.csv(acacia.env.500, \"Acacia_env/acacia.env.final.500.csv\")\n\nlibrary(plyr)\nacacia.env.all <- merge(acacia.env, acacia.env.pca250, by=0, all=TRUE)\nacacia.env.all <- rename(acacia.env.all, c(\"Comp.1\"=\"250.Comp.1\", \"Comp.2\"=\"250.Comp.2\", \"Comp.3\"=\"250.Comp.3\"))\nrownames(acacia.env.all) <- acacia.env.all[,1]\nacacia.env.all <- acacia.env.all[2:length(acacia.env.all)]\nacacia.env.all <- merge(acacia.env.all, acacia.env.pca500, by=0, all=TRUE)\nacacia.env.all <- rename(acacia.env.all, c(\"Comp.1\"=\"500.Comp.1\", \"Comp.2\"=\"500.Comp.2\", \"Comp.3\"=\"500.Comp.3\"))\nrownames(acacia.env.all) <- acacia.env.all[,1]\nacacia.env.all <- acacia.env.all[2:length(acacia.env.all)]\nacacia.env.all <- cbind(acacia.env.all, trans_250 = acacia.env.trans250[acacia.env.trans250$transformed_land == \"Transformed\", ]$Prop)\nacacia.env.all <- cbind(acacia.env.all, trans_500 = acacia.env.trans500[acacia.env.trans500$transformed_land == \"Transformed\", ]$Prop)\n\nrequire(data.table) # v1.9.5+\nbw_vs.dsttable <- data.frame(\n  dcast(setDT(read.csv(\"csv/Distance_Table_Attributes.csv\")), Site.Number ~ Landcover, value.var = c(\"Perimeter_Area_ratio\", \"Distance\")),\n  row.names = \"Site.Number\"\n)\n# eliminate NA columns\nbw_vs.dsttable <- bw_vs.dsttable[, colSums(is.na(bw_vs.dsttable)) == 0]\nacacia.env.all <- cbind(acacia.env.all, bw_vs.dsttable)\n\n\n#### Pivot land use\n.addSuffixSetNAsToZeroes <- function(x, suffix) {\n  colnames(x) <- paste(colnames(x), suffix, sep = \"_\")\n  x[is.na(x)] <- 0\n  x\n}\n\nacacia.landuse.250.pivot <- .addSuffixSetNAsToZeroes(cbind(\n  data.frame(\n    dcast(setDT(acacia.landuse.250), site ~ category, value.var = c(\"Prop\"), fun = sum),\n    row.names = \"site\"\n  ),\n  data.frame(\n    dcast(setDT(acacia.landuse.250[acacia.landuse.250$category == \"Natural\"]), site ~ landuse, value.var = c(\"Prop\")),\n    row.names = \"site\"\n  )\n), \"250\")\n\nacacia.landuse.500.pivot <- .addSuffixSetNAsToZeroes(cbind(\n  data.frame(\n    dcast(setDT(acacia.landuse.500), site ~ category, value.var = c(\"Prop\"), fun = sum),\n    row.names = \"site\"\n  ),\n  data.frame(\n    dcast(setDT(acacia.landuse.500[acacia.landuse.500$category == \"Natural\"]), site ~ landuse, value.var = c(\"Prop\")),\n    row.names = \"site\"\n  )\n), \"500\")\n\nacacia.env.all <- merge(acacia.env.all, acacia.landuse.250.pivot, by=0, all=TRUE)\nrownames(acacia.env.all) <- acacia.env.all[,1]\nacacia.env.all <- acacia.env.all[2:length(acacia.env.all)]\nacacia.env.all <- merge(acacia.env.all, acacia.landuse.500.pivot, by=0, all=TRUE)\nrownames(acacia.env.all) <- acacia.env.all[,1]\nacacia.env.all <- acacia.env.all[2:length(acacia.env.all)]\n\n\n#########################################################################\n#################### Community Matrix ##################################\n\nbw_vs_all <- read.csv(\"bw_vs_all.csv\")\n\n# exclude Ignota columns\nbw_vs_all <- bw_vs_all[,grep(\"Ignota\", names(bw_vs_all), invert = T)]\n# add factor labels\nbw_vs_all$Host <- factor(\n  as.character(bw_vs_all$Host),\n  levels = c(\"A_mearnsii\", \"A_sieberiana\")\n)\n\nbw_vs_all_expanded <- cbind(\n  Host = bw_vs_all$Host,\n  Sample = bw_vs_all$Sample,\n  Site = unlist(lapply(strsplit(as.character(bw_vs_all$Sample), \"\\\\_\"), \"[[\", 1)),\n  Region = gsub(\"MPL\", \"MP\", substring(gsub(\"MP\", \"MPL\",bw_vs_all$Sample),1,3)),\n  Season = bw_vs_all$Season,\n  subset(bw_vs_all, select = -c(Host, Sample, Season))\n)\n\nbw_vs_all.speciescolumns <- bw_vs_all[,4:length(bw_vs_all)]\nbw_vs_all.speciescolumns.nosingledoubletons <- bw_vs_all.speciescolumns[!apply(bw_vs_all.speciescolumns, 2, function(col) { length(col[col > 0]) <= 1 })]\n\nbw_vs_adjacent_all <- bw_vs_all\nbw_vs_adjacent_all$Host <- as.character(bw_vs_adjacent_all$Host)\nbw_vs_adjacent_all$Host[\n  grepl(\"KZN[23]|MP[34]\", bw_vs_adjacent_all$Sample) &\n    bw_vs_adjacent_all$Host == \"A_mearnsii\"\n  ] <- \"A_mearnsii (adjacent)\"\nbw_vs_adjacent_all$Host = factor(\n  bw_vs_adjacent_all$Host,\n  # reorder factor levels, ensuring that A_mearnsii (adjacent) is last\n  levels = c(\"A_mearnsii\", \"A_sieberiana\", \"A_mearnsii (adjacent)\")\n)\n\nbw_vs_all.nosingledoubletons <- cbind(bw_vs_all[,1:3], bw_vs_all.speciescolumns.nosingledoubletons)\nbw_vs_adjacent_all.nosingledoubletons <- cbind(bw_vs_adjacent_all[,1:3], bw_vs_all.speciescolumns.nosingledoubletons)\nrm(bw_vs_all.speciescolumns)\nrm(bw_vs_all.speciescolumns.nosingledoubletons)\n\n\nbw_vs.host_site_season <- bw_vs_all\nbw_vs.host_site_season$Host <- as.character(bw_vs_all$Host)\nbw_vs.host_site_season$Host[bw_vs_all$Host == 'A_mearnsii'] <- \"Am\"\nbw_vs.host_site_season$Host[bw_vs_all$Host == 'A_sieberiana'] <- \"Vs\"\n# create a new Site column containing just the site extracted from the Sample column\nbw_vs.host_site_season$Site <- unlist(lapply(strsplit(as.character(bw_vs.host_site_season$Sample), \"\\\\_\"), \"[[\", 1))\n# remove Sample column\nbw_vs.host_site_season <- subset(bw_vs.host_site_season, select = -c(Sample))\n# combine number of rows and sum, per site\nbw_vs.host_site_season <- aggregate(. ~ Host + Site + Season, bw_vs.host_site_season, sum)\n# set the rownames to MP1_As, etc...\nrownames(bw_vs.host_site_season) <- do.call(paste, c(bw_vs.host_site_season[c(\"Host\", \"Site\", \"Season\")], sep = \"_\"))\n# remove Site, Host & Season columns\nbw_vs.host_site_season <- subset(bw_vs.host_site_season, select = -c(Host, Site, Season))\n\ngroupBySite <- function(x) {\n  x$Site <- unlist(lapply(strsplit(as.character(x$Sample), \"\\\\_\"), \"[[\", 1))\n  # remove Host, Sample & Season columns\n  x <- subset(x, select = -c(Host, Sample, Season))\n  # combine number of rows and sum, per site\n  x <- aggregate(. ~ Site, x, sum)\n  # set rownames to Site\n  rownames(x) <- x$Site\n  # drop the Site column\n  x <- subset(x, select =-Site)\n  # return the result\n  x\n}\n\n# only A_mearsii\nbw <- groupBySite(bw_vs_all[bw_vs_all$Host == 'A_mearnsii',])\n# only A_sieberiana\nvs <- groupBySite(bw_vs_all[bw_vs_all$Host == 'A_sieberiana',])\n# A_mearnsii adjacent\nbw_adjacent <- groupBySite(bw_vs_adjacent_all[bw_vs_adjacent_all$Host == 'A_mearnsii (adjacent)',])\n\n\nbw_vs <- bw_vs_all\nbw_vs$Host <- as.character(bw_vs$Host)\nbw_vs$Host[bw_vs_all$Host == 'A_mearnsii'] <- \"Am\"\nbw_vs$Host[bw_vs_all$Host == 'A_sieberiana'] <- \"Vs\"\n# create a new Site column containing just the site extracted from the Sample column\nbw_vs$Site <- unlist(lapply(strsplit(as.character(bw_vs$Sample), \"\\\\_\"), \"[[\", 1))\n# remove Sample & Season columns\nbw_vs <- subset(bw_vs, select = -c(Sample, Season))\n# combine number of rows and sum, per site\nbw_vs <- aggregate(. ~ Host + Site, bw_vs, sum)\n# set the rownames to MP1_As, etc...\nrownames(bw_vs) <- do.call(paste, c(bw_vs[c(\"Site\", \"Host\")], sep = \"_\"))\n# remove Site & Host columns\nbw_vs <- subset(bw_vs, select = -c(Site, Host))\n\n\n\ngroupByFamily <- function(SC) {\n  names(SC)<-unlist(lapply(strsplit(names(SC), \"\\\\_\"), \"[[\", 1))\n  pv<-unique(names(SC))\n  \n  families<-data.frame(SC)\n  for (i in 1:length(pv)){\n    #i=1\n    tmp<-rowSums(data.frame(fam=SC[,which(names(SC)==pv[i])]))\n    families<-cbind(families, data.frame(add=tmp))\n  }\n  \n  families<-families[,-(1:length(names(SC)))]\n  names(families)<-pv\n  families\n}\n.pa<-function(x) {.columnnum(x, pa=T)}\n.columnnum<-function(x, pa=FALSE){\n  x<-x[sapply(x, is.numeric) ]\n  if (pa) x[x>0]<-1\n  return(x)\n}\nbw.family.abundances <- groupByFamily(bw)\nbw.family.morphossp <- groupByFamily(.pa(bw))\nvs.family.abundances <- groupByFamily(vs)\nvs.family.morphossp <- groupByFamily(.pa(vs))\n\nbw.rotated <- as.data.frame(t(bw))\nbw.species <- cbind(\n  Family = unlist(lapply(strsplit(names(bw), \"\\\\_\"), \"[[\", 1)),\n  MorphousSp = .pa(colSums(bw)),\n  MorphousSpKZN = .pa(rowSums(bw.rotated[grep(\"KZN\", names(bw.rotated), value = T)])),\n  MorphousSpMP = .pa(rowSums(bw.rotated[grep(\"MP\", names(bw.rotated), value = T)])),\n  Commonness = colSums(.pa(bw)),\n  Abundance = colSums(bw),\n  bw.rotated\n)\n\nvs.rotated <- as.data.frame(t(vs))\nvs.species <- cbind(\n  Family = unlist(lapply(strsplit(names(vs), \"\\\\_\"), \"[[\", 1)),\n  MorphousSp = .pa(colSums(vs)),\n  MorphousSpKZN = .pa(rowSums(vs.rotated[grep(\"KZN\", names(vs.rotated), value = T)])),\n  MorphousSpMP = .pa(rowSums(vs.rotated[grep(\"MP\", names(vs.rotated), value = T)])),\n  Commonness = colSums(.pa(vs)),\n  Abundance = colSums(vs),\n  vs.rotated\n)\n\nbw_adjacent.rotated <- as.data.frame(t(bw_adjacent))\nbw_adjacent.species <- cbind(\n  Family = unlist(lapply(strsplit(names(bw_adjacent), \"\\\\_\"), \"[[\", 1)),\n  MorphousSp = .pa(colSums(bw_adjacent)),\n  MorphousSpKZN = .pa(rowSums(bw_adjacent.rotated[grep(\"KZN\", names(bw_adjacent.rotated), value = T)])),\n  MorphousSpMP = .pa(rowSums(bw_adjacent.rotated[grep(\"MP\", names(bw_adjacent.rotated), value = T)])),\n  Commonness = colSums(.pa(bw_adjacent)),\n  Abundance = colSums(bw_adjacent),\n  bw_adjacent.rotated\n)\n\nlibrary(descr)\nbw.frequencies <- as.data.frame(freq(colSums(.pa(bw)), plot = F))\nvs.frequencies <- as.data.frame(freq(colSums(.pa(vs)), plot = F))\n\n###################### Split Hemiptera, Coleoptera and Ants\nbw_vs_all.ant_colmns <- which(grepl(\"Formicidae\",names(bw_vs_all)))\nbw_vs_all.coleoptera <- bw_vs_all[,1:(bw_vs_all.ant_colmns[1] - 1)]\nbw_vs_all.ants <- cbind(bw_vs_all[,1:3], bw_vs_all[,bw_vs_all.ant_colmns[1]:bw_vs_all.ant_colmns[length(bw_vs_all.ant_colmns)]])\nbw_vs_all.hemiptera <- cbind(bw_vs_all[,1:3], bw_vs_all[,(max(bw_vs_all.ant_colmns)+1):length(names(bw_vs_all))])\n\nbw_vs.ant_colmns = which(grepl(\"Formicidae\",names(bw_vs)))\nbw_vs.coleoptera <- bw_vs[,1:(bw_vs.ant_colmns[1] - 1)]\nbw_vs.ants <- bw_vs[,bw_vs.ant_colmns[1]:bw_vs.ant_colmns[length(bw_vs.ant_colmns)]]\nbw_vs.hemiptera <- bw_vs[,(max(bw_vs.ant_colmns)+1):length(names(bw_vs))]\n\n# remove family from Formicidae\nnames(bw_vs.ants) <- substring(names(bw_vs.ants), nchar(\"Formicidae_\") + 1)\n\nbw_vs.antsubfamilites <- cbind(bw_vs.coleoptera, bw_vs.ants, bw_vs.hemiptera)\n\n###################### Family counts\nbw_vs.family <- groupByFamily(bw_vs.antsubfamilites)\nbw_vs.family_counts <- cbind(\n  KZN_AM = sum(.pa(colSums(bw_vs.family[grep(\"KZN.+Am\", rownames(bw_vs.family)),]))),\n  MP_AM = sum(.pa(colSums(bw_vs.family[grep(\"MP.+Am\", rownames(bw_vs.family)),]))),\n  KZN_VS = sum(.pa(colSums(bw_vs.family[grep(\"KZN.+Vs\", rownames(bw_vs.family)),]))),\n  MP_VS = sum(.pa(colSums(bw_vs.family[grep(\"MP.+Vs\", rownames(bw_vs.family)),]))),\n  KZN = sum(.pa(colSums(bw_vs.family[grep(\"KZN\", rownames(bw_vs.family)),]))),\n  MP = sum(.pa(colSums(bw_vs.family[grep(\"MP\", rownames(bw_vs.family)),]))),\n  VS = sum(.pa(colSums(bw_vs.family[grep(\"Vs\", rownames(bw_vs.family)),]))),\n  AM = sum(.pa(colSums(bw_vs.family[grep(\"Am\", rownames(bw_vs.family)),]))),\n  AMAdj = sum(.pa(colSums(bw_vs.family[grep(\"(KZN[23]|MP[34])_Am\", rownames(bw_vs.family)),]))),\n  All = sum(.pa(colSums(bw_vs.family)))\n)\n\nbw_vs.per_family_counts <- as.data.frame(\n  t(groupByFamily(.pa(as.data.frame(rbind(\n    KZN_AM = colSums(bw_vs.antsubfamilites[grep(\"KZN.+Am\", rownames(bw_vs.antsubfamilites)),]),\n    MP_AM = colSums(bw_vs.antsubfamilites[grep(\"MP.+Am\", rownames(bw_vs.antsubfamilites)),]),\n    KZN_VS = colSums(bw_vs.antsubfamilites[grep(\"KZN.+Vs\", rownames(bw_vs.antsubfamilites)),]),\n    MP_VS = colSums(bw_vs.antsubfamilites[grep(\"MP.+Vs\", rownames(bw_vs.antsubfamilites)),]),\n    KZN = colSums(bw_vs.antsubfamilites[grep(\"KZN\", rownames(bw_vs.antsubfamilites)),]),\n    MP = colSums(bw_vs.antsubfamilites[grep(\"MP\", rownames(bw_vs.antsubfamilites)),]),\n    VS = colSums(bw_vs.antsubfamilites[grep(\"Vs\", rownames(bw_vs.antsubfamilites)),]),\n    AM = colSums(bw_vs.antsubfamilites[grep(\"Am\", rownames(bw_vs.antsubfamilites)),]),\n    AMAdj = colSums(bw_vs.antsubfamilites[grep(\"(KZN[23]|MP[34])_Am\", rownames(bw_vs.antsubfamilites)),]),\n    All = colSums(bw_vs.antsubfamilites)\n  )))))\n)\nbw_vs.per_family_counts$Order <- \"\"\nbw_vs.per_family_counts[rownames(bw_vs.per_family_counts) %in% names(groupByFamily(bw_vs.coleoptera)), ]$Order <- \"Coleoptera\"\nbw_vs.per_family_counts[rownames(bw_vs.per_family_counts) %in% names(groupByFamily(bw_vs.ants)), ]$Order <- \"Hymenoptera\"\nbw_vs.per_family_counts[rownames(bw_vs.per_family_counts) %in% names(groupByFamily(bw_vs.hemiptera)), ]$Order <- \"Hemiptera\"\nbw_vs.per_family_counts <- bw_vs.per_family_counts[order(\n  -bw_vs.per_family_counts$AM,\n  row.names(bw_vs.per_family_counts)\n),]\n\nwrite.csv(bw.family.abundances, \"csv/bw.family.abundances.csv\")\nwrite.csv(bw.family.morphossp, \"csv/bw.family.morphossp.csv\")\nwrite.csv(vs.family.abundances, \"csv/vs.family.abundances.csv\")\nwrite.csv(vs.family.morphossp, \"csv/vs.family.morphossp.csv\")\nwrite.csv(bw.species, \"csv/bw.species.csv\")\nwrite.csv(vs.species, \"csv/vs.species.csv\")\nwrite.csv(bw_adjacent.species, \"csv/bw_adjacent.species.csv\")\nwrite.csv(bw.frequencies, \"csv/bw.frequencies.csv\")\nwrite.csv(vs.frequencies, \"csv/vs.frequencies.csv\")\nwrite.csv(rbind(\n  Families = data.frame(bw_vs.family_counts, Order = \"\"),\n  bw_vs.per_family_counts\n), \"csv/bw_vs_family_counts.csv\")\n\n\n###################### Abundances and richness\n\nbs_vs.richness_abundance <- cbind(\n  Coleoptera_Abundance = rowSums(bw_vs.coleoptera),\n  Coleoptera_Richness = rowSums(.pa(bw_vs.coleoptera)),\n  Ants_Abundance = rowSums(bw_vs.ants),\n  Ants_Richness = rowSums(.pa(bw_vs.ants)),\n  Hemiptera_Abundance = rowSums(bw_vs.hemiptera),\n  Hemiptera_Richness = rowSums(.pa(bw_vs.hemiptera))\n)\nwrite.csv(bs_vs.richness_abundance, \"csv/Abundance & Richness.csv\")\n\n\n###################### Chapter 3\n\nbw_vs_adjacent <- bw_vs_adjacent_all\nnames(bw_vs_adjacent)[names(bw_vs_adjacent) == \"Sample\"] <- \"Site\"\nbw_vs_adjacent$Site <- unlist(lapply(strsplit(as.character(bw_vs_adjacent$Site), \"\\\\_\"), \"[[\", 1))\n\nbw_vs_adjacent.ant_columns <- which(grepl(\"Formicidae\",names(bw_vs_adjacent)))\nbw_vs_adjacent.coleoptera_columns <- 4:(bw_vs_adjacent.ant_columns[1] - 1)\nbw_vs_adjacent.hemiptera_columns <- (max(bw_vs_adjacent.ant_columns)+1):length(names(bw_vs_adjacent))\n\n.calculateAbundanceSpecpool <- function(x) {\n  cbind(\n    Abundance = sum(subset(x, select = -c(Host, Site, Season))),\n    as.data.frame(specpool(subset(aggregate(. ~ Site, subset(x, select = -c(Host, Season)), sum), select = -c(Site))))\n  )\n}\n.calculateAbundanceSpecpoolByHost <- function(prefix, host) {\n  out <- rbind(\n    \"Overall\" = .calculateAbundanceSpecpool(subset(bw_vs_adjacent, grepl(host, Host))),\n    \"MP\" = .calculateAbundanceSpecpool(subset(bw_vs_adjacent, grepl(host, Host) & grepl(\"MP\", Site))),\n    \"KZN\" = .calculateAbundanceSpecpool(subset(bw_vs_adjacent, grepl(host, Host) & grepl(\"KZN\", Site))),\n    \"Spring\" = .calculateAbundanceSpecpool(subset(bw_vs_adjacent, grepl(host, Host) & Season == \"Spring\")),\n    \"Summer\" = .calculateAbundanceSpecpool(subset(bw_vs_adjacent, grepl(host, Host) & Season == \"Summer\")),\n    \"Winter\" = .calculateAbundanceSpecpool(subset(bw_vs_adjacent, grepl(host, Host) & Season == \"Winter\")),\n    \"Coleoptera\" = .calculateAbundanceSpecpool(subset(bw_vs_adjacent, grepl(host, Host), select=c(1:3, bw_vs_adjacent.coleoptera_columns))),\n    \"Hemiptera\" = .calculateAbundanceSpecpool(subset(bw_vs_adjacent, grepl(host, Host), select=c(1:3, bw_vs_adjacent.hemiptera_columns))),\n    \"Formicidae\" = .calculateAbundanceSpecpool(subset(bw_vs_adjacent, grepl(host, Host), select=c(1:3, bw_vs_adjacent.ant_columns)))\n  )\n  rownames(out) <- paste(prefix, rownames(out))\n  out\n}\n\nwrite.csv(rbind(\n  .calculateAbundanceSpecpoolByHost(\"A. mearnsii\", \"A_mearnsii\"), # this will get all A_mearnsii and adjacent\n  .calculateAbundanceSpecpoolByHost(\"Adjacent\", \"A_mearnsii \\\\(adjacent\\\\)\"), # this will only get adjacent\n  .calculateAbundanceSpecpoolByHost(\"V. sieberiana\", \"A_sieberiana\")\n), \"csv/Richness Estimates.csv\")\n",
    "created" : 1486985246338.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "966975488",
    "id" : "7D6D561A",
    "lastKnownWriteTime" : 1459720188,
    "last_content_update" : 1459720188,
    "path" : "~/Desktop/Acacia data/Acacia.Environment.R",
    "project_path" : "Acacia.Environment.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}